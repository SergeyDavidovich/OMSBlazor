<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href='https://fonts.googleapis.com/css?family=Space Grotesk' rel='stylesheet'>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css">
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="icon" type="image/ico" href="favicon.ico" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <ErrorBoundary>
        <ChildContent>
            @if (HttpContext.Request.Path.StartsWithSegments("/"))
            {
                <OMSBlazor.Client.Pages.Home @rendermode="InteractiveServer"></OMSBlazor.Client.Pages.Home>
            }
            else
            {
                <Routes @rendermode="RenderModeForPage" />
            }
        </ChildContent>
        <ErrorContent>
            <p>Exception occured on the server side</p>
            @if (context.InnerException is not null)
            {
                @* Here we are interested in exceptions that are re-thrown from catch block *@
                @* Exception message contains the class and method names where exception occured *@
                <p>Exception message: @context.Message</p>
                @* Inner exception message contains message of the exception that breaked application *@
                <p>Inner exception message: @context.InnerException.Message</p>
            }
            else
            {
                <p>Exception message: @context.Message</p>
            }
        </ErrorContent>
    </ErrorBoundary>

    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>

    <style>
        html{
            font-size: 100%;
        }
    </style>

</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private bool IsDarkMode { get; set; }

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
        : InteractiveAuto;
}
