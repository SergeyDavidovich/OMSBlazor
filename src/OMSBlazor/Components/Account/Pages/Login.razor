@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using OMSBlazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="d-flex flex-column justify-center align-center">
    <MudCard Elevation="3">
        <div class="ma-10">
            <MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

            <MudAlert Severity="Severity.Info">
                Default user credentials. <br />
                Login: admin@email.com <br />
                Password: 1q2w3E* <br />
                Fields are filled you can just press Log in
            </MudAlert>

            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

                <div class="d-flex flex-column gap-5">
                    <div>
                        <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                            Label="Email" 
                                            UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                    </div>
                    <div>
                        <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                            Label="Password" InputType="InputType.Password" 
                                            UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                    </div>
                    <div class="d-flex flex-row justify-space-between align-center">
                        <MudStaticCheckBox Class="mr-10" For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                        <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                    </div>

                    <div>
                        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                    </div>

                    <div class="align-self-center">
                        <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br />
                        @* <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink> *@
                    </div>

                </div>
            </EditForm>
        </div>
    </MudCard>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new()
        {
            Email = "admin@email.com",
            Password = "1q2w3E*"
        };

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
