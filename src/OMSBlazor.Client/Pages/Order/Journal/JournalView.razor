@using System.Reactive.Linq
@using OMSBlazor.Client.Pages.Order.Invoice
@using OMSBlazor.Client.Themes
@inherits ReactiveComponentBase<JournalViewModel>
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<div class="d-flex flex-column justify-center">
    @if (!ViewModel.Orders.Any())
    {
        <MudProgressCircular Class="align-self-center" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Large" Indeterminate="true" />
    }
    else
    {
        @* This grid contain "show invoice" button and thus it is hidden on small screens(smartphones) *@
        <div class="d-none d-sm-flex justify-center align-center">
            <MudDataGrid T="SelectableOrderDto" Dense="true" Elevation="3" RowsPerPage="25" RowClass="cursor-pointer" RowClick="e=>ChangeSelectedOrder(e.Item.SourceOrderDto.OrderId)" Style="width:100%" Items="@ViewModel.Orders" RowStyleFunc="RowStyleFunc" Hover="true" Striped="true" Bordered="true">
                <ColGroup>
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                </ColGroup>
                <Columns>
                    <PropertyColumn Property="x => x.SourceOrderDto.OrderId" Title="Id" Sortable="false" />
                    <TemplateColumn Title="Customer" CellClass="cell-style">
                        <CellTemplate>
                            <MudText>
                                @ViewModel.Customers.Single(x => x.CustomerId == context.Item.SourceOrderDto.CustomerId).CompanyName
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Employee" CellClass="cell-style">
                        <CellTemplate>
                            <MudText>
                                @ViewModel.Employees.Single(x => x.EmployeeId == context.Item.SourceOrderDto.EmployeeId).FirstName @ViewModel.Employees.Single(x => x.EmployeeId == context.Item.SourceOrderDto.EmployeeId).LastName
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.SourceOrderDto.OrderDate" Format="dd/MM/yyyy" Title="Order date" HeaderClass="cell-style" />
                    <PropertyColumn Property="x=>x.SourceOrderDto.ShipName" Title="Ship name" CellClass="cell-style" />
                    <PropertyColumn Property="x=>x.SourceOrderDto.ShipCity" Title="Ship city" HeaderClass="cell-style" />
                    <PropertyColumn Property="x=>x.SourceOrderDto.ShipCountry" Title="Ship country" HeaderClass="cell-style" />
                    <TemplateColumn CellClass="d-flex justify-center">
                        <CellTemplate>
                            <MudButton Size="@MudBlazor.Size.Small" Variant="@Variant.Filled" Color="@MudBlazor.Color.Primary" OnClick="()=>ShowInvoice(context.Item.SourceOrderDto.OrderId)">Show invoice</MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn >
                        <CellTemplate>
                            @if (context.Item.SourceOrderDto.PaymentId is null)
                            {
                                <MudButton Size="@MudBlazor.Size.Small" Variant="@Variant.Filled" Color="@MudBlazor.Color.Primary" OnClick="()=>NavigateToCheckoutPage(context.Item.SourceOrderDto.OrderId)">Pay</MudButton>
                            }
                            else
                            {
                                <MudChip T="string" Color="MudBlazor.Color.Success">Paid</MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="SelectableOrderDto" />
                </PagerContent>
            </MudDataGrid>
        </div>

        @* This grid does not contain "show invoice" button and thus it is showen on small screens (smartphones)*@
        <div class="d-flex d-sm-none">
            <MudDataGrid T="SelectableOrderDto" Items="@ViewModel.Orders" RowStyleFunc="RowStyleFunc" Hover="true" Striped="true" Bordered="true">
                <Columns>
                    <PropertyColumn Property="x => x.SourceOrderDto.OrderId" Title="Id" Class="" />
                    <TemplateColumn Title="Customer">
                        <CellTemplate>
                            <MudText>
                                @ViewModel.Customers.Single(x => x.CustomerId == context.Item.SourceOrderDto.CustomerId).CompanyName
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Employee">
                        <CellTemplate>
                            <MudText>
                                @ViewModel.Employees.Single(x => x.EmployeeId == context.Item.SourceOrderDto.EmployeeId).FirstName @ViewModel.Employees.Single(x => x.EmployeeId == context.Item.SourceOrderDto.EmployeeId).LastName
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.SourceOrderDto.OrderDate" Format="dd/MM/yyyy" Title="Order date" />
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="SelectableOrderDto" />
                </PagerContent>
            </MudDataGrid>
        </div>
    }
</div>

<style>
    .cell-style {
    overflow-x: hidden;
    white-space: nowrap;
    }
</style>

@code {
    IDisposable registerLocationChangingHanlderDisposable = default!;

    private bool invoicePresent;

    protected override void Dispose(bool disposing)
    {
        registerLocationChangingHanlderDisposable?.Dispose();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registerLocationChangingHanlderDisposable = this.NavigationManager.RegisterLocationChangingHandler(context =>
            {
                if (invoicePresent)
                {
                    context.PreventNavigation();
                }
                return ValueTask.CompletedTask;
            });
        }
        base.OnAfterRender(firstRender);
    }

    public async Task NavigateToCheckoutPage(int orderId)
    {
        var checkoutUrl = await ViewModel?.GetCheckoutUrl(orderId, NavigationManager.BaseUri.TrimEnd('/'));

        NavigationManager.NavigateTo(checkoutUrl);
    }

    public async Task ShowInvoice(int orderId)
    {
        var arr = await ViewModel.ChangeSelectedOrderCommand.Execute(orderId);
        var parameters = new DialogParameters<InvoiceDialog>()
        {
            { x=>x.InvoiceData, arr }
        };
        var options = new DialogOptions { NoHeader = true, BackdropClick = false };
        invoicePresent = true;
        var dialog = DialogService.Show<InvoiceDialog>("Invoice", parameters, options);

        await dialog.Result;

        invoicePresent = false;
    }

    private async Task ChangeSelectedOrder(int orderId)
    {
        await ViewModel.ChangeSelectedOrderCommand.Execute(orderId);
    }

    private string RowStyleFunc(SelectableOrderDto selectableOrder, int index)
    {
        if (selectableOrder.IsSelcted)
        {
            return $"background-color: {MudBlazor.Colors.DeepOrange.Lighten1}";
        }
        else
        {
            return string.Empty;
        }
    }
}