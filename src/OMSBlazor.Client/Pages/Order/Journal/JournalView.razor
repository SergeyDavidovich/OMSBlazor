@using System.Reactive.Linq
@inherits ReactiveComponentBase<JournalViewModel>

<StupeniCard Title="Orders journal" Icon="@Icons.Material.Filled.List" IsWithButton="false">
    <MudDataGrid T="SelectableOrderDto" Items="@ViewModel.Orders" RowStyleFunc="RowStyleFunc" RowClick="e=>ChangeSelectedOrder(e.Item.SourceOrderDto.OrderId)" Hover="true" Striped="true" Bordered="true">
@*         <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="@ViewModel.SearchTerm" Placeholder="Search by customer id" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
 *@        <Columns>
            <PropertyColumn Property="x => x.SourceOrderDto.OrderId" Title="Id" />
            <TemplateColumn Title="Customer">
                <CellTemplate>
                    <MudText>
                        @ViewModel.Customers.Single(x=>x.CustomerId==context.Item.SourceOrderDto.CustomerId).CompanyName
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Employee">
                <CellTemplate>
                    <MudText>
                        @ViewModel.Employees.Single(x => x.EmployeeId == context.Item.SourceOrderDto.EmployeeId).FirstName @ViewModel.Employees.Single(x => x.EmployeeId == context.Item.SourceOrderDto.EmployeeId).LastName
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.SourceOrderDto.OrderDate" Format="dd/MM/yyyy" Title="Order date" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="SelectableOrderDto" />
        </PagerContent>
    </MudDataGrid>
</StupeniCard>

@code {
    [Parameter]
    public EventCallback<byte[]> OnSelectedOrderChanged { get; set; }

    private string RowStyleFunc(SelectableOrderDto selectableOrder, int index)
    {
        if (selectableOrder.IsSelcted)
        {
            return "background-color: #EDE7F6";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task ChangeSelectedOrder(int orderId)
    {
        var arr = await ViewModel.ChangeSelectedOrderCommand.Execute(orderId);
        await OnSelectedOrderChanged.InvokeAsync(arr);
    }
}