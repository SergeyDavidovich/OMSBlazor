@using OMSBlazor.Dto.Customer
@using OMSBlazor.Dto.Employee
@using System.Reactive.Linq
@inherits ReactiveComponentBase<CreateViewModel>

<MudGrid>
    <MudItem xs="12" lg="6" md="6">
        <StupeniCard Title="Products on Store" Icon="@Icons.Material.Filled.Home" ButtonColor="MudBlazor.Color.Secondary" IsButtonDisabled="!ViewModel.CanRemoveProductFromOrderAll" ButtonText="Remove all" OnClickCallBack="RemoveAllButtonClicked">
            @if (!ViewModel.ProductsInStore.Any())
            {
                <MudProgressCircular Class="align-self-center" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Large" Indeterminate="true" />
            }
            else
            {
                <div class="d-none d-sm-flex justify-center align-center">
                    @* hidden on small screen and visible on all other*@
                    <MudDataGrid Items="@ViewModel!.ProductsInStore" Style="width:100%" Elevation="3" Dense="true" Virtualize="true" Hover="true" Striped="true" Bordered="true" FixedHeader="true" Height="600px">
                        <ColGroup>
                            <col />
                            <col />
                            <col />
                            <col style="width: 100%" />
                        </ColGroup>
                        <Columns>
                            <PropertyColumn Title="Product name" Property="x => x.ProductName" CellStyle="white-space: nowrap;" />
                            <PropertyColumn Title="Unit price" Property="x => x.UnitPrice" Sortable="false" HeaderStyle="white-space: nowrap;" />
                            <PropertyColumn Title="Unit in stock" Property="x=>x.UnitsInStock" Sortable="false" HeaderStyle="white-space: nowrap;" />
                            <TemplateColumn CellClass="d-flex justify-center">
                                <CellTemplate>
                                    @if (context.Item.Added)
                                    {
                                        <MudButton Color="MudBlazor.Color.Error" Variant="Variant.Filled" OnClick="e=>OnRemoveProductFromOrderClick(context.Item.ProductID)">Remove from order</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Color="MudBlazor.Color.Success" Variant="Variant.Filled" OnClick="e=>OnAddProductToOrderClick(context.Item.ProductID)">Add to order</MudButton>
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </div>
                <div class="d-flex d-sm-none">
                    @* hidden on all screens except small one*@
                    <MudDataGrid Items="@ViewModel!.ProductsInStore" Elevation="3" Dense="true" Virtualize="true" Hover="true" Striped="true" Bordered="true" FixedHeader="true" Height="600px">
                        <Columns>
                            <PropertyColumn Title="Product name" Property="x => x.ProductName" />
                            <PropertyColumn Title="Unit price" Property="x => x.UnitPrice" Sortable="false" />
                            <PropertyColumn Title="Unit in stock" Property="x=>x.UnitsInStock" Sortable="false" />
                            <TemplateColumn Title="Added" Editable="true">
                                <CellTemplate>
                                    <MudCheckBox @bind-Value="context.Item.Added" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </div>
            }
        </StupeniCard>
    </MudItem>
    <MudItem xs="12" lg="6" md="6">
        <StupeniCard Title="Products in Order"
                     Icon="@Icons.Material.Filled.Timer"
                     ButtonColor="MudBlazor.Color.Success"
                     ButtonText="Create" IsButtonDisabled="@ViewModel!.CreateOrderButtonDisabled" OnClickCallBack="CreateOrderButtonClicked">
            <div class="d-flex flex-column justify-space-between" style="height: 100%;">
                <MudGrid>
                    <MudItem xs="12">
                        <MudDatePicker @bind-Date="@ViewModel!.OrderDate" Label="Order date" ReadOnly="true" ShowToolbar="true" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect T="EmployeeDto" ToStringFunc="GetFullName" @bind-Value="@ViewModel!.SelectedEmployee" Label="Employee" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var employee in ViewModel!.Employees)
                            {
                                <MudSelectItem Value="employee" />
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect T="CustomerDto" ToStringFunc="GetCustomerName" @bind-Value="@ViewModel!.SelectedCustomer" Label="Customer" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var customer in ViewModel!.Customers)
                            {
                                <MudSelectItem Value="customer" />
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDataGrid Items="@ViewModel!.ProductsInOrder" Dense="true" Elevation="3" Virtualize="true" FixedHeader="true" Hover="true" Striped="true" Bordered="true" Height="400px">
                            <Columns>
                                <PropertyColumn Title="Product name" Property="x => x.ProductName" />
                                <PropertyColumn Title="Unit price" Property="x=>x.UnitPrice" />
                                <TemplateColumn Title="Quantity">
                                    <CellTemplate>
                                        <MudNumericField T="short" @bind-Value="context.Item.SelectedQuantity" Variant="Variant.Text" Min="0" />
                                    </CellTemplate>
                                </TemplateColumn>
                                <TemplateColumn Title="Discount">
                                    <CellTemplate>
                                        <MudNumericField T="float" @bind-Value="context.Item.SelectedDiscount" Variant="Variant.Text" Min="0" Max="100" />
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </MudItem>
                </MudGrid>
                <MudItem Class="align-self-end">
                    <MudText Typo="Typo.h6">@($"Total price: {ViewModel!.TotalSumString}")</MudText>
                </MudItem>
            </div>
        </StupeniCard>
    </MudItem>
</MudGrid>

@code {
    private Func<EmployeeDto, string> GetFullName = employee => $"{employee.FirstName} {employee.LastName}";
    private Func<CustomerDto, string> GetCustomerName = customer => $"{customer.CompanyName}";

    [Parameter]
    public EventCallback<byte[]> PdfGenerated { get; set; }

    private async Task OnRemoveProductFromOrderClick(int productId)
    {
        await ViewModel.RemoveProductFromOrderCommand.Execute(productId);
    }

    private async Task OnAddProductToOrderClick(int productId)
    {
        await ViewModel.AddProductToOrderCommand.Execute(productId);
    }
}