@using BitzArt.Blazor.Cookies
@using OMSBlazor.Client.Themes
@inherits LayoutComponentBase
@implements IDisposable
@inject PersistentComponentState ApplicationState
@inject ICookieService CookieService

<MudThemeProvider Theme="Theme" @bind-IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider 
    FullWidth="true"
    CloseButton="true"
    CloseOnEscapeKey="true"
    MaxWidth="MaxWidth.Medium"/>
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="d-none d-sm-flex ml-3">Order Management System</MudText>
        <MudText Typo="Typo.h5" Class="d-flex d-sm-none ml-3" Style="font-size: 1.25rem">Order Management System</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="MudBlazor.Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Breakpoint="Breakpoint.Lg" ClipMode="DrawerClipMode.Docked" Style="@($"color:{Theme.PaletteDark.White}; background:{Theme.PaletteDark.Dark};")" Elevation="1" Variant="DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Class="text-gradient">Order managment system</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        <ErrorBoundary>
            <ChildContent>
                <CascadingValue Name="IsDarkMode" Value="_isDarkMode">
                    @Body
                </CascadingValue>
            </ChildContent>
            <ErrorContent>
                <p>Exception occured on the client side</p>
                @if (context.InnerException is not null)
                {
                    @* Here we are interested in exceptions that are re-thrown from catch block *@
                    @* Exception message contains the class and method names where exception occured *@
                    <p>Exception message: @context.Message</p>
                    @* Inner exception message contains message of the exception that breaked application *@
                    <p>Inner exception message: @context.InnerException.Message</p>
                }
                else
                {
                    <p>Exception message: @context.Message</p>
                }
            </ErrorContent>
        </ErrorBoundary>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style>
    .text-gradient {
        background: #FF0000;
        background: linear-gradient(to right, #FF0000 0%, #FFFF00 25%, #05C1FF 50%, #FFFF00 75%, #FF0000 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
</style>

@code {
    private PersistingComponentStateSubscription persistingSubscription;
    private MudTheme Theme = MyCustomTheme.MudTheme;
    private bool _isDarkMode = false;
    private bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        await CookieService.SetAsync("IsDarkMode", _isDarkMode.ToString(), new DateTimeOffset().AddYears(1));
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.DarkMode,
        false => Icons.Material.Outlined.LightMode,
    };

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistIsDarkMode);

        if (!ApplicationState.TryTakeFromJson<bool>("IsDarkMode", out var isDarkMode))
        {
            var cookie = await CookieService.GetAsync("IsDarkMode");
            if (cookie is null)
            {
                _isDarkMode = false;
            }
            else
            {
                _isDarkMode = bool.Parse(cookie.Value);
            }
        }
        else
        {
            _isDarkMode = isDarkMode;
        }
    }

    private Task PersistIsDarkMode()
    {
        ApplicationState.PersistAsJson("IsDarkMode", _isDarkMode);

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }
}