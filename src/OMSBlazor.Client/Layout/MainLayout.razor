@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Order Management System</MudText>
        <MudSpacer />
        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="MudBlazor.Color.Inherit" Edge="Edge.End" /> *@
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="MudBlazor.Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        <ErrorBoundary>
            <ChildContent>
                <CascadingValue Name="IsDarkMode" Value="_isDarkMode">
                    @Body
                </CascadingValue>
            </ChildContent>
            <ErrorContent>
                <p>Exception occured on the client side</p>
                @if(context.InnerException is not null)
                {
                    @* Here we are interested in exceptions that are re-thrown from catch block *@
                    @* Exception message contains the class and method names where exception occured *@
                    <p>Exception message: @context.Message</p> 
                    @* Inner exception message contains message of the exception that breaked application *@
                    <p>Inner exception message: @context.InnerException.Message</p>
                }
                else
                {
                    <p>Exception message: @context.Message</p>
                }
            </ErrorContent>
        </ErrorBoundary>
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isDarkMode = false;
    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.DarkMode,
        false => Icons.Material.Outlined.LightMode,
    };
}


