@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>

    <AuthorizeView>
        <Authorized>
            <MudContainer>
                <MudStack Class="m-2" Row="true">
                    <MudBadge Color="MudBlazor.Color.Success" Overlap="true" Bordered="true">
                        <MudAvatar Size="MudBlazor.Size.Medium">
                            <MudImage Src="Images/avatar1.png"></MudImage>
                        </MudAvatar>
                    </MudBadge>
                    <MudLink Typo="Typo.h6" Href="Account/Manage">@context.User.Identity?.Name</MudLink>
                </MudStack>
            </MudContainer>

            <MudMenuItem>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <MudButton FullWidth="true" ButtonType="ButtonType.Submit" Style="@($"color:{Theme.PaletteDark.White};")" StartIcon="@Icons.Material.Filled.Logout">Logout</MudButton>
                </form>
            </MudMenuItem>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>

    <MudDivider DividerType="DividerType.Middle" />

    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="orders" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Edit">Orders</MudNavLink>
    <MudNavLink Href="dashboard" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
</MudNavMenu>


@code {
    private MudTheme Theme = new MudTheme();
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


