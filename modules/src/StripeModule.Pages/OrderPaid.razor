@page "/orderComplete/{OrderId:int}/{Currency:string}/{Amount:decimal}"
@using System.Text
@using System.Text.Json
@using StripeModule.DTOs
@using MudBlazor
@inject HttpClient HttpClient

<h2>Order with id - @OrderId, is paid</h2>
<p>Got it, thanks!</p>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Payment Details</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (paymentDto != null)
        {
            <MudText><b>Payment ID:</b> @paymentDto.Id</MudText>
            <MudText><b>Product ID:</b> @paymentDto.ProductId</MudText>
            <MudText><b>Currency:</b> @paymentDto.Currency</MudText>
            <MudText><b>Amount:</b> @paymentDto.Amount</MudText>
        }
        else
        {
            <MudText>Loading payment details...</MudText>
        }
    </MudCardContent>
</MudCard>

@code{
    [Parameter]
    public int OrderId{ get; set; }

    [Parameter]
    public string Currency { get; set; }

    [Parameter]
    public decimal Amount { get; set; }

    private PaymentDto? paymentDto;

    protected override async Task OnInitializedAsync()
    {
        using StringContent jsonContent = new(JsonSerializer.Serialize(new { OrderId, Currency, Amount }), Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync("api/stripe/payment", jsonContent);
        var jsonResponse = await response.Content.ReadAsStringAsync();
        paymentDto = JsonSerializer.Deserialize<PaymentDto>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}